{"ast":null,"code":"var _jsxFileName = \"/home/user/Bootcamp/chapter10/contactBookRedux/src/components/Todo.js\";\nimport React from 'react';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\n\nclass Todo extends React.Component {\n  // handleDeleteTodo = (id) => {\n  //     const todos = this.state.todos.filter((item) => {\n  //         return item.id !== id; \n  //     });\n  //     this.setState({todos});\n  // }\n  // handleEditTodo = ({id, title, surname, number}) => {\n  //     const index = this.state.todos.findIndex(item => item.id === id);\n  //     const todos = [...this.state.todos];\n  //     const item = {...todos[index]};\n  //     item.title = title;\n  //     item.surname = surname;\n  //     item.number = number;\n  //     todos[index] = item;\n  //     this.setState({todos});\n  // }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TodoForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TodoList, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Todo; // constructor(probs){\n//     super(probs);\n//     console.log(\"CONSTRUCTOR\");\n//     // this.handleChangeStatus = this.handleChangeStatus.bind(this); //? Нужно если функция обычная, чтобы не потерять контекст.\n//     // this.state = {} //? Нельзя\n//     // this.setState() //! Можно\n//     // this.state = {\n//     //     bool: probs.bool\n//     // }\n// }\n// componentDidMount(){ //? Вызывается один раз после конструктора и render\n//     console.log(\"MOUNT\");\n//     // this.setState() //? Можно. \n// }\n// componentDidUpdate(prevProps, prevState){ //? Вызывается каждый раз когда компонент обновился\n//     console.log(\"UPDATED\", prevProps, prevState);\n//     // this.setState()//! вызывать нельзя\n//     if(prevState.todos.length > this.state.todos.length){\n//         console.log(\"todos - 1\");\n//         // this.setState()//? Можно\n//     }\n// }\n// shouldComponentUpdate(nextProbs, nextState){//? Вызывается перед обновлением \n//     console.log(\"SHOULD_UPDATE\", nextProbs, nextState);\n//     // let nextStatus = nextState.todos[1].status;\n//     // let status = this.state.todos[1].status;\n//     // if(nextStatus === false && nextStatus !==status){\n//     //     return false;\n//     // }\n//     return true;\n// }\n// componentWillUnmount(){//? вызывается когда собирается исчезнуть\n//     console.log(\"UNMPONT\");\n// }","map":{"version":3,"sources":["/home/user/Bootcamp/chapter10/contactBookRedux/src/components/Todo.js"],"names":["React","TodoList","TodoForm","Todo","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAGA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAkC;AAE9B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIAC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AA7B6B;;AAgClC,eAAeF,IAAf,C,CAiBA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm'\n\n\nclass Todo extends React.Component{\n\n    // handleDeleteTodo = (id) => {\n    //     const todos = this.state.todos.filter((item) => {\n    //         return item.id !== id; \n    //     });\n    //     this.setState({todos});\n    // }\n\n    // handleEditTodo = ({id, title, surname, number}) => {\n    //     const index = this.state.todos.findIndex(item => item.id === id);\n    //     const todos = [...this.state.todos];\n    //     const item = {...todos[index]};\n    //     item.title = title;\n    //     item.surname = surname;\n    //     item.number = number;\n    //     todos[index] = item;\n    //     this.setState({todos});\n    // }\n\n\n\n    render(){\n        return(\n            <div className = \"todo\">\n                <TodoForm  />\n                <TodoList />\n            </div>\n        )\n    }\n}\n\nexport default Todo;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// constructor(probs){\n//     super(probs);\n//     console.log(\"CONSTRUCTOR\");\n\n//     // this.handleChangeStatus = this.handleChangeStatus.bind(this); //? Нужно если функция обычная, чтобы не потерять контекст.\n\n//     // this.state = {} //? Нельзя\n//     // this.setState() //! Можно\n\n//     // this.state = {\n//     //     bool: probs.bool\n//     // }\n// }\n\n\n// componentDidMount(){ //? Вызывается один раз после конструктора и render\n//     console.log(\"MOUNT\");\n//     // this.setState() //? Можно. \n// }\n\n// componentDidUpdate(prevProps, prevState){ //? Вызывается каждый раз когда компонент обновился\n//     console.log(\"UPDATED\", prevProps, prevState);\n\n//     // this.setState()//! вызывать нельзя\n\n//     if(prevState.todos.length > this.state.todos.length){\n//         console.log(\"todos - 1\");\n//         // this.setState()//? Можно\n//     }\n// }\n\n// shouldComponentUpdate(nextProbs, nextState){//? Вызывается перед обновлением \n//     console.log(\"SHOULD_UPDATE\", nextProbs, nextState);\n\n//     // let nextStatus = nextState.todos[1].status;\n//     // let status = this.state.todos[1].status;\n\n//     // if(nextStatus === false && nextStatus !==status){\n//     //     return false;\n//     // }\n//     return true;\n// }\n\n// componentWillUnmount(){//? вызывается когда собирается исчезнуть\n//     console.log(\"UNMPONT\");\n// }\n\n"]},"metadata":{},"sourceType":"module"}