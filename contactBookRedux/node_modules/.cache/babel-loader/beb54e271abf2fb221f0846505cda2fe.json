{"ast":null,"code":"var _jsxFileName = \"/home/user/Bootcamp/chapter10/contactBookRedux/src/components/Todo.js\";\nimport React from 'react';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\n\nclass Todo extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChangeStatus = id => {\n      const index = this.state.todos.findIndex(item => item.id === id);\n      const todos = [...this.state.todos];\n      const item = { ...todos[index]\n      };\n      item.status = !item.status;\n      todos[index] = item;\n      this.setState({\n        todos\n      });\n    };\n\n    this.handleDeleteTodo = id => {\n      // const todos = [...this.state.todos];\n      // const index = this.state.todos.findIndex(item => item.id === id);\n      // todos.splice(index, 1);\n      const todos = this.state.todos.filter(item => {\n        return item.id !== id;\n      });\n      this.setState({\n        todos\n      });\n    };\n\n    this.handleEditTodo = ({\n      id,\n      title\n    }) => {\n      const index = this.state.todos.findIndex(item => item.id === id);\n      const todos = [...this.state.todos];\n      const item = { ...todos[index]\n      };\n      item.title = title;\n      todos[index] = item;\n      this.setState({\n        todos\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TodoForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TodoList, {\n      changeStatus: this.handleChangeStatus,\n      deleteTodo: this.handleDeleteTodo,\n      editTodo: this.handleEditTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Todo; // constructor(probs){\n//     super(probs);\n//     console.log(\"CONSTRUCTOR\");\n//     // this.handleChangeStatus = this.handleChangeStatus.bind(this); //? Нужно если функция обычная, чтобы не потерять контекст.\n//     // this.state = {} //? Нельзя\n//     // this.setState() //! Можно\n//     // this.state = {\n//     //     bool: probs.bool\n//     // }\n// }\n// componentDidMount(){ //? Вызывается один раз после конструктора и render\n//     console.log(\"MOUNT\");\n//     // this.setState() //? Можно. \n// }\n// componentDidUpdate(prevProps, prevState){ //? Вызывается каждый раз когда компонент обновился\n//     console.log(\"UPDATED\", prevProps, prevState);\n//     // this.setState()//! вызывать нельзя\n//     if(prevState.todos.length > this.state.todos.length){\n//         console.log(\"todos - 1\");\n//         // this.setState()//? Можно\n//     }\n// }\n// shouldComponentUpdate(nextProbs, nextState){//? Вызывается перед обновлением \n//     console.log(\"SHOULD_UPDATE\", nextProbs, nextState);\n//     // let nextStatus = nextState.todos[1].status;\n//     // let status = this.state.todos[1].status;\n//     // if(nextStatus === false && nextStatus !==status){\n//     //     return false;\n//     // }\n//     return true;\n// }\n// componentWillUnmount(){//? вызывается когда собирается исчезнуть\n//     console.log(\"UNMPONT\");\n// }","map":{"version":3,"sources":["/home/user/Bootcamp/chapter10/contactBookRedux/src/components/Todo.js"],"names":["React","TodoList","TodoForm","Todo","Component","handleChangeStatus","id","index","state","todos","findIndex","item","status","setState","handleDeleteTodo","filter","handleEditTodo","title","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAGA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAkC;AAAA;AAAA;;AAAA,SAC9BC,kBAD8B,GACRC,EAAD,IAAQ;AACzB,YAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,SAAjB,CAA2BC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAA/C,CAAd;AACA,YAAMG,KAAK,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,CAAd;AACA,YAAME,IAAI,GAAG,EAAC,GAAGF,KAAK,CAACF,KAAD;AAAT,OAAb;AACAI,MAAAA,IAAI,CAACC,MAAL,GAAc,CAACD,IAAI,CAACC,MAApB;AACAH,MAAAA,KAAK,CAACF,KAAD,CAAL,GAAeI,IAAf;AACA,WAAKE,QAAL,CAAc;AAACJ,QAAAA;AAAD,OAAd;AACH,KAR6B;;AAAA,SAU9BK,gBAV8B,GAUVR,EAAD,IAAQ;AACvB;AACA;AACA;AACA,YAAMG,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBM,MAAjB,CAAyBJ,IAAD,IAAU;AAC5C,eAAOA,IAAI,CAACL,EAAL,KAAYA,EAAnB;AACH,OAFa,CAAd;AAGA,WAAKO,QAAL,CAAc;AAACJ,QAAAA;AAAD,OAAd;AACH,KAlB6B;;AAAA,SAoB9BO,cApB8B,GAoBb,CAAC;AAACV,MAAAA,EAAD;AAAKW,MAAAA;AAAL,KAAD,KAAiB;AAC9B,YAAMV,KAAK,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,SAAjB,CAA2BC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAA/C,CAAd;AACA,YAAMG,KAAK,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,CAAd;AACA,YAAME,IAAI,GAAG,EAAC,GAAGF,KAAK,CAACF,KAAD;AAAT,OAAb;AACAI,MAAAA,IAAI,CAACM,KAAL,GAAaA,KAAb;AACAR,MAAAA,KAAK,CAACF,KAAD,CAAL,GAAeI,IAAf;AACA,WAAKE,QAAL,CAAc;AAACJ,QAAAA;AAAD,OAAd;AACH,KA3B6B;AAAA;;AA+B9BS,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,QAAD;AACI,MAAA,YAAY,EAAI,KAAKb,kBADzB;AAEI,MAAA,UAAU,EAAI,KAAKS,gBAFvB;AAGI,MAAA,QAAQ,EAAI,KAAKE,cAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAUH;;AA1C6B;;AA6ClC,eAAeb,IAAf,C,CAiBA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm'\n\n\nclass Todo extends React.Component{\n    handleChangeStatus = (id) => {\n        const index = this.state.todos.findIndex(item => item.id === id);\n        const todos = [...this.state.todos];\n        const item = {...todos[index]};\n        item.status = !item.status;\n        todos[index] = item;\n        this.setState({todos});\n    }\n\n    handleDeleteTodo = (id) => {\n        // const todos = [...this.state.todos];\n        // const index = this.state.todos.findIndex(item => item.id === id);\n        // todos.splice(index, 1);\n        const todos = this.state.todos.filter((item) => {\n            return item.id !== id; \n        });\n        this.setState({todos});\n    }\n\n    handleEditTodo = ({id, title}) => {\n        const index = this.state.todos.findIndex(item => item.id === id);\n        const todos = [...this.state.todos];\n        const item = {...todos[index]};\n        item.title = title;\n        todos[index] = item;\n        this.setState({todos});\n    }\n\n\n\n    render(){\n        return(\n            <div className = \"todo\">\n                <TodoForm  />\n                <TodoList \n                    changeStatus = {this.handleChangeStatus}\n                    deleteTodo = {this.handleDeleteTodo}\n                    editTodo = {this.handleEditTodo}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Todo;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// constructor(probs){\n//     super(probs);\n//     console.log(\"CONSTRUCTOR\");\n\n//     // this.handleChangeStatus = this.handleChangeStatus.bind(this); //? Нужно если функция обычная, чтобы не потерять контекст.\n\n//     // this.state = {} //? Нельзя\n//     // this.setState() //! Можно\n\n//     // this.state = {\n//     //     bool: probs.bool\n//     // }\n// }\n\n\n// componentDidMount(){ //? Вызывается один раз после конструктора и render\n//     console.log(\"MOUNT\");\n//     // this.setState() //? Можно. \n// }\n\n// componentDidUpdate(prevProps, prevState){ //? Вызывается каждый раз когда компонент обновился\n//     console.log(\"UPDATED\", prevProps, prevState);\n\n//     // this.setState()//! вызывать нельзя\n\n//     if(prevState.todos.length > this.state.todos.length){\n//         console.log(\"todos - 1\");\n//         // this.setState()//? Можно\n//     }\n// }\n\n// shouldComponentUpdate(nextProbs, nextState){//? Вызывается перед обновлением \n//     console.log(\"SHOULD_UPDATE\", nextProbs, nextState);\n\n//     // let nextStatus = nextState.todos[1].status;\n//     // let status = this.state.todos[1].status;\n\n//     // if(nextStatus === false && nextStatus !==status){\n//     //     return false;\n//     // }\n//     return true;\n// }\n\n// componentWillUnmount(){//? вызывается когда собирается исчезнуть\n//     console.log(\"UNMPONT\");\n// }\n\n"]},"metadata":{},"sourceType":"module"}